<div id="container"></div>
<script src="assets/particles/Three.js"></script>
<script src="assets/particles/Detector.js"></script>
<script src="assets/particles/data1.js"></script>
<script src="assets/particles/OrbitControls.js"></script>
<script src="assets/particles/Tween.js"></script>

<script type="x-shader/x-vertex" id="vertexshader">

			uniform float amplitude;
			uniform float direction;
			attribute float size;
			attribute vec3 customColor;
			attribute vec3 custompositiona;
			attribute vec3 custompositionb;
			uniform float time;

			varying vec3 vColor;
			varying float fAlpha;

			void main() {

				vColor = customColor;

				vec3 pos = position;

				// small noise  movement
				pos.x += cos(time + (position.y/8.0))*50.0;
				pos.z += sin(time + (position.x/8.0))*50.0;
				pos.y += sin(time + (position.z/4.0))*40.0;

				// morph
				vec3 morphed = vec3( 0.0, 0.0, 0.0 );
				if (direction == 0.0) {
					morphed += ( custompositiona - position ) * amplitude;
				} else {
					morphed += ( custompositionb - position ) * amplitude;
				}
				morphed += pos;

				vec4 mvPosition = modelViewMatrix * vec4( morphed, 1.0 );

				fAlpha = (mvPosition.z+6000.0)/6000.0;

				gl_PointSize = min(150.0, size * ( 150.0 / length( mvPosition.xyz ) ) );

				gl_Position = projectionMatrix * mvPosition;

			}
</script>

<script type="x-shader/x-fragment" id="fragmentshader">

			uniform vec3 color;
			uniform sampler2D texture;

			varying vec3 vColor;
			varying float fAlpha;

			void main() {

				gl_FragColor = vec4( color * vColor, fAlpha );

				gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );
				//vec4 outColor = texture2D( texture, gl_PointCoord );
				//if ( outColor.a < 0.3 ) discard; // alpha be gone

				//gl_FragColor = outColor * vec4( color * vColor.xyz, fAlpha );

			}
</script>

<script>
    if (!Detector.webgl) Detector.addGetWebGLMessage();

    var renderer, scene, camera, stats;

    var particleSystem, uniforms, geometry;
    var delta;
    var time;
    var oldTime;
    var switchCount = 0;
    var extraRotation = {value: 0};

    var mouseX = 0, mouseY = 0;
    var tomouseX = 0, tomouseY = 0;

    var WIDTH = window.innerWidth;
    var HEIGHT = window.innerHeight;

    document.addEventListener('mousemove', onDocumentMouseMove, false);

    var font = new THREE.FontLoader();
    font.load('assets/particles/HYYiNingLiJ_Regular.json', function (font) {

        init(font);
        animate();

    });

    function init(font) {

        uniforms = {

            amplitude: {value: 0.0},
            color: {value: new THREE.Color(0x6495ed)},
            texture: {value: new THREE.TextureLoader().load("assets/particles/disc.png")},
            time: {value: 1.0},
            direction: {value: 1.0},

        };

        var shaderMaterial = new THREE.ShaderMaterial({

            uniforms: uniforms,
            vertexShader: document.getElementById('vertexshader').textContent,
            fragmentShader: document.getElementById('fragmentshader').textContent,
            blending: THREE.NormalBlending,
            depthTest: true,
            transparent: true,
        });

        var extraParticles = 20000;
        var radius = 1800;
        var Dlength = Math.floor(data1.length / 3);
        var Vlength = 100000;

        geometry = new THREE.BufferGeometry();
        var positions = new Float32Array(Vlength * 3);
        var customColors = new Float32Array(Vlength * 3);
        var sizes = new Float32Array(Vlength);
        var custompositionas = new Float32Array(Vlength * 3);
        var custompositionbs = new Float32Array(Vlength * 3);

        var fgeometry = new THREE.TextGeometry("谱时昊唯\n   智享先行", {

            font: font,

            size: 28,
            height: 1,
            curveSegments: 70,
            /*
             bevelThickness: 6,
             bevelSize: 20,
             bevelEnabled: true,
             bevelSegments: 3,
             */
            steps: 1,
        });

        fgeometry.center();

        var fvertices = fgeometry.vertices;
        var flength = fvertices.length;

        for (var i = 0; i < Vlength; i++) {

            var index = i * 3;
            if (i > flength - 1) {
                var vector = getRandomPointOnparticles(400 + Math.random() * radius * 1.5);
                vector.toArray(custompositionbs, index);
            } else {
                var vector = fvertices [i];
                vector.multiplyScalar(35);
                vector.z = vector.z + 1200;
                vector.toArray(custompositionbs, index);

            }
        }

        particleSystem = new THREE.Points(geometry, shaderMaterial);

        for (var i = 0; i < Dlength; ++i) {
            var index = i * 3;
            var vector = getRandomPointOnparticles(400 + Math.random() * radius * 1.5);
            vector.toArray(positions, index);
        }

        for (var i = 0; i < Vlength - Dlength; i++) {
            var index = ( Dlength + i ) * 3
            var vector = getRandomPointOnparticles(radius + Math.random() * radius);
            vector.toArray(positions, index);
        }

        for (var i = 0; i < Vlength; i++) {

            var index = i * 3;
            sizes[i] = 8 + Math.random() * 90;

            //customColor[ i ].setHSL( 0.99, 0.75*( i / vertices.length ), 1.0 );
            var color = new THREE.Color(0xafeeee);
            color.toArray(customColors, index);

        }

        console.log(customColors);

        for (var i = 0; i < Vlength; i++) {

            var index = i * 3;

            if (i > Dlength - 1) {
                var vector = getRandomPointOnparticles(400 + Math.random() * radius * 1.5);
                vector.toArray(custompositionas, index);
            } else {
                var vector = new THREE.Vector3(data1[index], data1[index + 2] - 2, -data1[index + 1]);
                vector.multiplyScalar(120);
                vector.toArray(custompositionas, index);
            }

        }

        geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));
        geometry.addAttribute('custompositiona', new THREE.BufferAttribute(custompositionas, 3));
        geometry.addAttribute('custompositionb', new THREE.BufferAttribute(custompositionbs, 3));
        geometry.addAttribute('customColor', new THREE.BufferAttribute(customColors, 3));
        geometry.addAttribute('size', new THREE.BufferAttribute(sizes, 1));

        scene = new THREE.Scene();
        scene.add(particleSystem);

        particleSystem.position.z = -3500;
        var tween = new TWEEN.Tween(particleSystem.position)
                .to({z: 0}, 3000)
                .delay(100)
                .easing(TWEEN.Easing.Back.EaseOut);
        tween.start();
        tweenUp();

        camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 10000);
        camera.position.z = 5200;

        renderer = new THREE.WebGLRenderer({alpha: true, antialias: true});
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(WIDTH, HEIGHT);

        var container = document.getElementById('container');
        container.appendChild(renderer.domElement);

        /*
         controls = new THREE.OrbitControls( camera, renderer.domElement );
         controls.addEventListener( 'change', render );
         controls.enableZoom = true;
         */

        window.addEventListener('resize', onWindowResize, false);
        //renderer.render( scene, camera );


    }

    function onDocumentMouseMove(event) {

        event.preventDefault();

        var windowHalfX = window.innerWidth >> 1;
        var windowHalfY = window.innerHeight >> 1;

        mouseX = ( event.clientX - windowHalfX );
        mouseY = ( event.clientY - windowHalfY );

    }

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize(window.innerWidth, window.innerHeight);
    }

    function getRandomPointOnparticles(r) {
        var angle = Math.random() * Math.PI * 2;
        var u = Math.random() * 2 - 1;

        var v = new THREE.Vector3(
                Math.cos(angle) * Math.sqrt(1 - Math.pow(u, 2)) * r,
                Math.sin(angle) * Math.sqrt(1 - Math.pow(u, 2)) * r,
                u * r
        );
        return v;
    }

    function tweenUp() {

        if (switchCount % 2 == 1) {
            uniforms.direction.value = 0.0;
        } else {
            uniforms.direction.value = 1.0;
        }

        ++switchCount;

        var tween = new TWEEN.Tween(uniforms.amplitude)
                .to({value: 1}, 8000)
                .easing(TWEEN.Easing.Back.EaseInOut)
                .delay(200)
                .onComplete(tweenDown);
        tween.start();
    }


    function tweenDown() {

        var tween = new TWEEN.Tween(uniforms.amplitude)
                .to({value: 0}, 4000)
                .easing(TWEEN.Easing.Back.EaseInOut)
                .delay(6500)
                .onComplete(tweenUp);
        tween.start();

        var rottween = new TWEEN.Tween(extraRotation)
                .to({value: extraRotation.value + Math.PI * 2}, 12000)
                .easing(TWEEN.Easing.Quintic.EaseInOut)
                .delay(6000);
        rottween.start();
    }

    function animate() {

        requestAnimationFrame(animate);

        render();
    }

    function render() {

        time = new Date().getTime();
        delta = time - oldTime;
        oldTime = time;

        if (isNaN(delta) || delta > 1000 || delta == 0) {
            delta = 1000 / 60;
        }

        uniforms.time.value += 0.03;

        tomouseX += (mouseX - tomouseX) / 30;
        tomouseY += (mouseY - tomouseY) / 30;

        particleSystem.rotation.x = tomouseY / 1000;
        particleSystem.rotation.y = extraRotation.value + (tomouseX / 800);

        TWEEN.update();


        renderer.render(scene, camera);
    }

</script>